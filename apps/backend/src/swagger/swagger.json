{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"EventImageType": {
				"type": "string",
				"enum": [
					"flyer",
					"hero"
				]
			},
			"PaginationMeta": {
				"properties": {
					"page": {
						"type": "number",
						"format": "double"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"total": {
						"type": "number",
						"format": "double"
					},
					"totalPages": {
						"type": "number",
						"format": "double"
					},
					"hasNext": {
						"type": "boolean"
					},
					"hasPrev": {
						"type": "boolean"
					}
				},
				"required": [
					"page",
					"limit",
					"total",
					"totalPages",
					"hasNext",
					"hasPrev"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResponse__createdAt-Date--description-string-or-null--eventEndDate-Date--eventStartDate-Date--externalUrl-string--id-string--name-string--status-string--updatedAt-Date--venueAddress-string--venueName-string-or-null--images_58__url-string--imageType-EventImageType_-Array__": {
				"properties": {
					"data": {
						"items": {
							"properties": {
								"images": {
									"items": {
										"properties": {
											"imageType": {
												"$ref": "#/components/schemas/EventImageType"
											},
											"url": {
												"type": "string"
											}
										},
										"required": [
											"imageType",
											"url"
										],
										"type": "object"
									},
									"type": "array"
								},
								"venueName": {
									"type": "string",
									"nullable": true
								},
								"venueAddress": {
									"type": "string"
								},
								"updatedAt": {
									"type": "string",
									"format": "date-time"
								},
								"status": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"externalUrl": {
									"type": "string"
								},
								"eventStartDate": {
									"type": "string",
									"format": "date-time"
								},
								"eventEndDate": {
									"type": "string",
									"format": "date-time"
								},
								"description": {
									"type": "string",
									"nullable": true
								},
								"createdAt": {
									"type": "string",
									"format": "date-time"
								}
							},
							"required": [
								"images",
								"venueName",
								"venueAddress",
								"updatedAt",
								"status",
								"name",
								"id",
								"externalUrl",
								"eventStartDate",
								"eventEndDate",
								"description",
								"createdAt"
							],
							"type": "object"
						},
						"type": "array"
					},
					"pagination": {
						"$ref": "#/components/schemas/PaginationMeta"
					}
				},
				"required": [
					"data",
					"pagination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetEventsPaginatedResponse": {
				"properties": {
					"data": {
						"items": {
							"properties": {
								"images": {
									"items": {
										"properties": {
											"imageType": {
												"$ref": "#/components/schemas/EventImageType"
											},
											"url": {
												"type": "string"
											}
										},
										"required": [
											"imageType",
											"url"
										],
										"type": "object"
									},
									"type": "array"
								},
								"venueName": {
									"type": "string",
									"nullable": true
								},
								"venueAddress": {
									"type": "string"
								},
								"updatedAt": {
									"type": "string",
									"format": "date-time"
								},
								"status": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"externalUrl": {
									"type": "string"
								},
								"eventStartDate": {
									"type": "string",
									"format": "date-time"
								},
								"eventEndDate": {
									"type": "string",
									"format": "date-time"
								},
								"description": {
									"type": "string",
									"nullable": true
								},
								"createdAt": {
									"type": "string",
									"format": "date-time"
								}
							},
							"required": [
								"images",
								"venueName",
								"venueAddress",
								"updatedAt",
								"status",
								"name",
								"id",
								"externalUrl",
								"eventStartDate",
								"eventEndDate",
								"description",
								"createdAt"
							],
							"type": "object"
						},
						"type": "array"
					},
					"pagination": {
						"$ref": "#/components/schemas/PaginationMeta"
					}
				},
				"required": [
					"data",
					"pagination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"infer_typeofPaginationSchema_": {
				"properties": {
					"sortOrder": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"sortBy": {
						"type": "string"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"page": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"limit",
					"page"
				],
				"type": "object"
			},
			"PaginationQuery": {
				"$ref": "#/components/schemas/infer_typeofPaginationSchema_"
			},
			"UserPublicMetadata": {
				"description": "If you want to provide custom types for the user.publicMetadata object,\nsimply redeclare this rule in the global namespace.\nEvery user object will use the provided type.",
				"properties": {},
				"type": "object",
				"additionalProperties": {}
			},
			"UserPrivateMetadata": {
				"description": "If you want to provide custom types for the user.privateMetadata object,\nsimply redeclare this rule in the global namespace.\nEvery user object will use the provided type.",
				"properties": {},
				"type": "object",
				"additionalProperties": {}
			},
			"UserUnsafeMetadata": {
				"description": "If you want to provide custom types for the user.unsafeMetadata object,\nsimply redeclare this rule in the global namespace.\nEvery user object will use the provided type.",
				"properties": {},
				"type": "object",
				"additionalProperties": {}
			},
			"VerificationStatus": {
				"type": "string",
				"enum": [
					"unverified",
					"verified",
					"transferable",
					"failed",
					"expired"
				]
			},
			"url.URL": {
				"type": "string",
				"description": "The URLÂ interface represents an object providing static methods used for creating object URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)\n`URL` class is a global reference for `import { URL } from 'url'`\nhttps://nodejs.org/api/url.html#the-whatwg-url-api"
			},
			"Verification": {
				"description": "The Backend `Verification` object describes the state of the verification process of a sign-in or sign-up attempt.",
				"properties": {
					"status": {
						"$ref": "#/components/schemas/VerificationStatus",
						"description": "The state of the verification.\n\n<ul>\n <li>`unverified`: The verification has not been verified yet.</li>\n <li>`verified`: The verification has been verified.</li>\n <li>`transferable`: The verification is transferable to between sign-in and sign-up flows.</li>\n <li>`failed`: The verification has failed.</li>\n <li>`expired`: The verification has expired.</li>\n</ul>"
					},
					"strategy": {
						"type": "string",
						"description": "The strategy pertaining to the parent sign-up or sign-in attempt."
					},
					"externalVerificationRedirectURL": {
						"allOf": [
							{
								"$ref": "#/components/schemas/url.URL"
							}
						],
						"nullable": true,
						"description": "The redirect URL for an external verification."
					},
					"attempts": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The number of attempts related to the verification."
					},
					"expireAt": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The time the verification will expire at."
					},
					"nonce": {
						"type": "string",
						"nullable": true,
						"description": "The [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) pertaining to the verification."
					},
					"message": {
						"type": "string",
						"nullable": true,
						"description": "The message that will be presented to the user's Web3 wallet for signing during authentication. This follows the [Sign-In with Ethereum (SIWE) protocol format](https://docs.login.xyz/general-information/siwe-overview/eip-4361#example-message-to-be-signed), which typically includes details like the requesting service, wallet address, terms acceptance, nonce, timestamp, and any additional resources."
					}
				},
				"required": [
					"status",
					"strategy",
					"externalVerificationRedirectURL",
					"attempts",
					"expireAt",
					"nonce",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IdentificationLink": {
				"description": "Contains information about any identifications that might be linked to the email address.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for the identification link."
					},
					"type": {
						"type": "string",
						"description": "The type of the identification link, e.g., `\"email_address\"`, `\"phone_number\"`, etc."
					}
				},
				"required": [
					"id",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EmailAddress": {
				"description": "The Backend `EmailAddress` object is a model around an email address. Email addresses are one of the [identifiers](https://clerk.com/docs/authentication/configuration/sign-up-sign-in-options#identifiers) used to provide identification for users.\n\nEmail addresses must be **verified** to ensure that they are assigned to their rightful owners. The `EmailAddress` object holds all necessary state around the verification process.\n\nFor implementation examples for adding and verifying email addresses, see the [email link custom flow](https://clerk.com/docs/custom-flows/email-links) and [email code custom flow](https://clerk.com/docs/custom-flows/add-email) guides.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for the email address."
					},
					"emailAddress": {
						"type": "string",
						"description": "The value of the email address."
					},
					"verification": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Verification"
							}
						],
						"nullable": true,
						"description": "An object holding information on the verification of the email address."
					},
					"linkedTo": {
						"items": {
							"$ref": "#/components/schemas/IdentificationLink"
						},
						"type": "array",
						"description": "An array of objects containing information about any identifications that might be linked to the email address."
					}
				},
				"required": [
					"id",
					"emailAddress",
					"verification",
					"linkedTo"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PhoneNumber": {
				"description": "The Backend `PhoneNumber` object describes a phone number. Phone numbers can be used as a proof of identification for users, or simply as a means of contacting users.\n\nPhone numbers must be **verified** to ensure that they can be assigned to their rightful owners. The `PhoneNumber` object holds all the necessary state around the verification process.\n\nFinally, phone numbers can be used as part of [multi-factor authentication](https://clerk.com/docs/authentication/configuration/sign-up-sign-in-options#multi-factor-authentication). During sign in, users can opt in to an extra verification step where they will receive an SMS message with a one-time code. This code must be entered to complete the sign in process.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for this phone number."
					},
					"phoneNumber": {
						"type": "string",
						"description": "The value of this phone number, in [E.164 format](https://en.wikipedia.org/wiki/E.164)."
					},
					"reservedForSecondFactor": {
						"type": "boolean",
						"description": "Set to `true` if this phone number is reserved for multi-factor authentication (2FA). Set to `false` otherwise."
					},
					"defaultSecondFactor": {
						"type": "boolean",
						"description": "Set to `true` if this phone number is the default second factor. Set to `false` otherwise. A user must have exactly one default second factor, if multi-factor authentication (2FA) is enabled."
					},
					"verification": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Verification"
							}
						],
						"nullable": true,
						"description": "An object holding information on the verification of this phone number."
					},
					"linkedTo": {
						"items": {
							"$ref": "#/components/schemas/IdentificationLink"
						},
						"type": "array",
						"description": "An object containing information about any other identification that might be linked to this phone number."
					}
				},
				"required": [
					"id",
					"phoneNumber",
					"reservedForSecondFactor",
					"defaultSecondFactor",
					"verification",
					"linkedTo"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Web3Wallet": {
				"description": "The Backend `Web3Wallet` object describes a Web3 wallet address. The address can be used as a proof of identification for users.\n\nWeb3 addresses must be verified to ensure that they can be assigned to their rightful owners. The verification is completed via Web3 wallet browser extensions, such as [Metamask](https://metamask.io/), [Coinbase Wallet](https://www.coinbase.com/wallet), and [OKX Wallet](https://www.okx.com/help/section/faq-web3-wallet). The `Web3Wallet3` object holds all the necessary state around the verification process.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique ID for the Web3 wallet."
					},
					"web3Wallet": {
						"type": "string",
						"description": "The Web3 wallet address, made up of 0x + 40 hexadecimal characters."
					},
					"verification": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Verification"
							}
						],
						"nullable": true,
						"description": "An object holding information on the verification of this Web3 wallet."
					}
				},
				"required": [
					"id",
					"web3Wallet",
					"verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ExternalAccount": {
				"description": "The Backend `ExternalAccount` object is a model around an identification obtained by an external provider (e.g. a social provider such as Google).\n\nExternal account must be verified, so that you can make sure they can be assigned to their rightful owners. The `ExternalAccount` object holds all necessary state around the verification process.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for this external account."
					},
					"provider": {
						"type": "string",
						"description": "The provider name (e.g., `google`)."
					},
					"identificationId": {
						"type": "string",
						"description": "The identification with which this external account is associated."
					},
					"externalId": {
						"type": "string",
						"description": "The unique ID of the user in the provider."
					},
					"approvedScopes": {
						"type": "string",
						"description": "The scopes that the user has granted access to."
					},
					"emailAddress": {
						"type": "string",
						"description": "The user's email address."
					},
					"firstName": {
						"type": "string",
						"description": "The user's first name."
					},
					"lastName": {
						"type": "string",
						"description": "The user's last name."
					},
					"imageUrl": {
						"type": "string",
						"description": "The user's image URL."
					},
					"username": {
						"type": "string",
						"nullable": true,
						"description": "The user's username."
					},
					"phoneNumber": {
						"type": "string",
						"nullable": true,
						"description": "The phone number related to this specific external account."
					},
					"publicMetadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Record_string.unknown_"
							}
						],
						"nullable": true,
						"description": "Metadata that can be read from the Frontend API and Backend API and can be set only from the Backend API."
					},
					"label": {
						"type": "string",
						"nullable": true,
						"description": "A descriptive label to differentiate multiple external accounts of the same user for the same provider."
					},
					"verification": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Verification"
							}
						],
						"nullable": true,
						"description": "An object holding information on the verification of this external account."
					}
				},
				"required": [
					"id",
					"provider",
					"identificationId",
					"externalId",
					"approvedScopes",
					"emailAddress",
					"firstName",
					"lastName",
					"imageUrl",
					"username",
					"phoneNumber",
					"publicMetadata",
					"label",
					"verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SamlAccountConnection": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"domain": {
						"type": "string"
					},
					"active": {
						"type": "boolean"
					},
					"provider": {
						"type": "string"
					},
					"syncUserAttributes": {
						"type": "boolean"
					},
					"allowSubdomains": {
						"type": "boolean"
					},
					"allowIdpInitiated": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "number",
						"format": "double"
					},
					"updatedAt": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"name",
					"domain",
					"active",
					"provider",
					"syncUserAttributes",
					"allowSubdomains",
					"allowIdpInitiated",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SamlAccount": {
				"description": "The Backend `SamlAccount` object describes a SAML account.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for the SAML account."
					},
					"provider": {
						"type": "string",
						"description": "The provider of the SAML account."
					},
					"providerUserId": {
						"type": "string",
						"nullable": true,
						"description": "The user's ID as used in the provider."
					},
					"active": {
						"type": "boolean",
						"description": "A boolean that indicates whether the SAML account is active."
					},
					"emailAddress": {
						"type": "string",
						"description": "The email address of the SAML account."
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the SAML account."
					},
					"lastName": {
						"type": "string",
						"description": "The last name of the SAML account."
					},
					"verification": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Verification"
							}
						],
						"nullable": true,
						"description": "The verification of the SAML account."
					},
					"samlConnection": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SamlAccountConnection"
							}
						],
						"nullable": true,
						"description": "The SAML connection of the SAML account."
					}
				},
				"required": [
					"id",
					"provider",
					"providerUserId",
					"active",
					"emailAddress",
					"firstName",
					"lastName",
					"verification",
					"samlConnection"
				],
				"type": "object",
				"additionalProperties": false
			},
			"User": {
				"description": "The Backend `User` object is similar to the `User` object as it holds information about a user of your application, such as their unique identifier, name, email addresses, phone numbers, and more. However, the Backend `User` object is different from the `User` object in that it is used in the [Backend API](https://clerk.com/docs/reference/backend-api/tag/Users#operation/GetUser){{ target: '_blank' }} and is not directly accessible from the Frontend API.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for the user."
					},
					"passwordEnabled": {
						"type": "boolean",
						"description": "A boolean indicating whether the user has a password on their account."
					},
					"totpEnabled": {
						"type": "boolean",
						"description": "A boolean indicating whether the user has enabled TOTP by generating a TOTP secret and verifying it via an authenticator app."
					},
					"backupCodeEnabled": {
						"type": "boolean",
						"description": "A boolean indicating whether the user has enabled Backup codes."
					},
					"twoFactorEnabled": {
						"type": "boolean",
						"description": "A boolean indicating whether the user has enabled two-factor authentication."
					},
					"banned": {
						"type": "boolean",
						"description": "A boolean indicating whether the user is banned or not."
					},
					"locked": {
						"type": "boolean",
						"description": "A boolean indicating whether the user is banned or not."
					},
					"createdAt": {
						"type": "number",
						"format": "double",
						"description": "The date when the user was first created."
					},
					"updatedAt": {
						"type": "number",
						"format": "double",
						"description": "The date when the user was last updated."
					},
					"imageUrl": {
						"type": "string",
						"description": "The URL of the user's profile image."
					},
					"hasImage": {
						"type": "boolean",
						"description": "A getter boolean to check if the user has uploaded an image or one was copied from OAuth. Returns `false` if Clerk is displaying an avatar for the user."
					},
					"primaryEmailAddressId": {
						"type": "string",
						"nullable": true,
						"description": "The ID for the `EmailAddress` that the user has set as primary."
					},
					"primaryPhoneNumberId": {
						"type": "string",
						"nullable": true,
						"description": "The ID for the `PhoneNumber` that the user has set as primary."
					},
					"primaryWeb3WalletId": {
						"type": "string",
						"nullable": true,
						"description": "The ID for the [`Web3Wallet`](https://clerk.com/docs/references/backend/types/backend-web3-wallet) that the user signed up with."
					},
					"lastSignInAt": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The date when the user last signed in. May be empty if the user has never signed in."
					},
					"externalId": {
						"type": "string",
						"nullable": true,
						"description": "The ID of the user as used in your external systems. Must be unique across your instance."
					},
					"username": {
						"type": "string",
						"nullable": true,
						"description": "The user's username."
					},
					"firstName": {
						"type": "string",
						"nullable": true,
						"description": "The user's first name."
					},
					"lastName": {
						"type": "string",
						"nullable": true,
						"description": "The user's last name."
					},
					"publicMetadata": {
						"$ref": "#/components/schemas/UserPublicMetadata",
						"description": "Metadata that can be read from the Frontend API and [Backend API](https://clerk.com/docs/reference/backend-api){{ target: '_blank' }} and can be set only from the Backend API."
					},
					"privateMetadata": {
						"$ref": "#/components/schemas/UserPrivateMetadata",
						"description": "Metadata that can be read and set only from the [Backend API](https://clerk.com/docs/reference/backend-api){{ target: '_blank' }}."
					},
					"unsafeMetadata": {
						"$ref": "#/components/schemas/UserUnsafeMetadata",
						"description": "Metadata that can be read and set from the Frontend API. It's considered unsafe because it can be modified from the frontend."
					},
					"emailAddresses": {
						"items": {
							"$ref": "#/components/schemas/EmailAddress"
						},
						"type": "array",
						"description": "An array of all the `EmailAddress` objects associated with the user. Includes the primary."
					},
					"phoneNumbers": {
						"items": {
							"$ref": "#/components/schemas/PhoneNumber"
						},
						"type": "array",
						"description": "An array of all the `PhoneNumber` objects associated with the user. Includes the primary."
					},
					"web3Wallets": {
						"items": {
							"$ref": "#/components/schemas/Web3Wallet"
						},
						"type": "array",
						"description": "An array of all the `Web3Wallet` objects associated with the user. Includes the primary."
					},
					"externalAccounts": {
						"items": {
							"$ref": "#/components/schemas/ExternalAccount"
						},
						"type": "array",
						"description": "An array of all the `ExternalAccount` objects associated with the user via OAuth. **Note**: This includes both verified & unverified external accounts."
					},
					"samlAccounts": {
						"items": {
							"$ref": "#/components/schemas/SamlAccount"
						},
						"type": "array",
						"description": "An array of all the `SamlAccount` objects associated with the user via SAML."
					},
					"lastActiveAt": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Date when the user was last active."
					},
					"createOrganizationEnabled": {
						"type": "boolean",
						"description": "A boolean indicating whether the organization creation is enabled for the user or not."
					},
					"createOrganizationsLimit": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "An integer indicating the number of organizations that can be created by the user. If the value is `0`, then the user can create unlimited organizations. Default is `null`."
					},
					"deleteSelfEnabled": {
						"type": "boolean",
						"description": "A boolean indicating whether the user can delete their own account."
					},
					"legalAcceptedAt": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "The unix timestamp of when the user accepted the legal requirements. `null` if [**Require express consent to legal documents**](https://clerk.com/docs/authentication/configuration/legal-compliance) is not enabled."
					}
				},
				"required": [
					"id",
					"passwordEnabled",
					"totpEnabled",
					"backupCodeEnabled",
					"twoFactorEnabled",
					"banned",
					"locked",
					"createdAt",
					"updatedAt",
					"imageUrl",
					"hasImage",
					"primaryEmailAddressId",
					"primaryPhoneNumberId",
					"primaryWeb3WalletId",
					"lastSignInAt",
					"externalId",
					"username",
					"firstName",
					"lastName",
					"publicMetadata",
					"privateMetadata",
					"unsafeMetadata",
					"emailAddresses",
					"phoneNumbers",
					"web3Wallets",
					"externalAccounts",
					"samlAccounts",
					"lastActiveAt",
					"createOrganizationEnabled",
					"createOrganizationsLimit",
					"deleteSelfEnabled",
					"legalAcceptedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EventTicketCurrency": {
				"type": "string",
				"enum": [
					"USD",
					"UYU"
				]
			},
			"GetEventByIdResponse": {
				"properties": {
					"ticketWaves": {
						"items": {
							"properties": {
								"isSoldOut": {
									"type": "boolean"
								},
								"isAvailable": {
									"type": "boolean"
								},
								"faceValue": {
									"type": "string"
								},
								"currency": {
									"$ref": "#/components/schemas/EventTicketCurrency"
								},
								"name": {
									"type": "string"
								},
								"description": {
									"type": "string",
									"nullable": true
								}
							},
							"required": [
								"isSoldOut",
								"isAvailable",
								"faceValue",
								"currency",
								"name",
								"description"
							],
							"type": "object"
						},
						"type": "array"
					},
					"eventImages": {
						"items": {
							"properties": {
								"imageType": {
									"$ref": "#/components/schemas/EventImageType"
								},
								"url": {
									"type": "string"
								}
							},
							"required": [
								"imageType",
								"url"
							],
							"type": "object"
						},
						"type": "array"
					},
					"venueName": {
						"type": "string",
						"nullable": true
					},
					"venueAddress": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"externalUrl": {
						"type": "string"
					},
					"eventStartDate": {
						"type": "string",
						"format": "date-time"
					},
					"eventEndDate": {
						"type": "string",
						"format": "date-time"
					},
					"description": {
						"type": "string",
						"nullable": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"ticketWaves",
					"eventImages",
					"venueName",
					"venueAddress",
					"updatedAt",
					"status",
					"name",
					"id",
					"externalUrl",
					"eventStartDate",
					"eventEndDate",
					"description",
					"createdAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"HealthCheckResult": {
				"properties": {
					"status": {
						"type": "string",
						"enum": [
							"healthy",
							"unhealthy",
							"degraded"
						]
					},
					"message": {
						"type": "string"
					},
					"responseTime": {
						"type": "number",
						"format": "double"
					},
					"details": {
						"$ref": "#/components/schemas/Record_string.any_"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HealthCheck": {
				"properties": {
					"status": {
						"type": "string",
						"enum": [
							"healthy",
							"unhealthy",
							"degraded"
						]
					},
					"timestamp": {
						"type": "string"
					},
					"uptime": {
						"type": "number",
						"format": "double"
					},
					"version": {
						"type": "string"
					},
					"checks": {
						"properties": {
							"external": {
								"$ref": "#/components/schemas/HealthCheckResult"
							},
							"disk": {
								"$ref": "#/components/schemas/HealthCheckResult"
							},
							"memory": {
								"$ref": "#/components/schemas/HealthCheckResult"
							},
							"database": {
								"$ref": "#/components/schemas/HealthCheckResult"
							}
						},
						"required": [
							"disk",
							"memory"
						],
						"type": "object"
					}
				},
				"required": [
					"status",
					"timestamp",
					"uptime",
					"version",
					"checks"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "backend",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"paths": {
		"/events": {
			"get": {
				"operationId": "GetAllPaginated",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetEventsPaginatedResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Events"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "sortOrder",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/events/protected": {
			"get": {
				"operationId": "GetProtected",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"tags": [
					"Events"
				],
				"security": [],
				"parameters": []
			}
		},
		"/events/{eventId}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetEventByIdResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Events"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "eventId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/health": {
			"get": {
				"operationId": "Basic",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"timestamp": {
											"type": "string"
										},
										"status": {
											"type": "string"
										}
									},
									"required": [
										"timestamp",
										"status"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/health/detailed": {
			"get": {
				"operationId": "Detailed",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HealthCheck"
								}
							}
						}
					}
				},
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/health/database": {
			"get": {
				"operationId": "Database",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"database": {},
												"timestamp": {
													"type": "string"
												},
												"message": {
													"type": "string"
												},
												"status": {
													"type": "string"
												}
											},
											"required": [
												"timestamp",
												"message",
												"status"
											],
											"type": "object"
										},
										{
											"properties": {
												"message": {},
												"database": {
													"$ref": "#/components/schemas/HealthCheckResult"
												},
												"timestamp": {
													"type": "string"
												},
												"status": {
													"type": "string",
													"enum": [
														"healthy",
														"unhealthy",
														"degraded"
													]
												}
											},
											"required": [
												"database",
												"timestamp",
												"status"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/health/memory": {
			"get": {
				"operationId": "Memory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"memory": {
											"$ref": "#/components/schemas/HealthCheckResult"
										},
										"timestamp": {
											"type": "string"
										},
										"status": {
											"type": "string",
											"enum": [
												"healthy",
												"unhealthy",
												"degraded"
											]
										}
									},
									"required": [
										"memory",
										"timestamp",
										"status"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/health/ready": {
			"get": {
				"operationId": "Readiness",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"timestamp": {
											"type": "string"
										},
										"status": {
											"type": "string",
											"enum": [
												"healthy",
												"unhealthy",
												"degraded"
											]
										},
										"ready": {
											"type": "boolean"
										}
									},
									"required": [
										"timestamp",
										"status",
										"ready"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/health/live": {
			"get": {
				"operationId": "Liveness",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"uptime": {
											"type": "number",
											"format": "double"
										},
										"timestamp": {
											"type": "string"
										},
										"alive": {
											"type": "boolean"
										}
									},
									"required": [
										"uptime",
										"timestamp",
										"alive"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}